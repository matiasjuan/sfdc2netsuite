<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting"
	xmlns:netsuite="http://www.mulesoft.org/schema/mule/netsuite"
	xmlns:data-mapper="http://www.mulesoft.org/schema/mule/ee/data-mapper"
	xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:sfdc="http://www.mulesoft.org/schema/mule/sfdc"
	xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" version="EE-3.4.2"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/sfdc http://www.mulesoft.org/schema/mule/sfdc/5.0/mule-sfdc.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/ee/data-mapper http://www.mulesoft.org/schema/mule/ee/data-mapper/current/mule-data-mapper.xsd
http://www.mulesoft.org/schema/mule/netsuite http://www.mulesoft.org/schema/mule/netsuite/3.0/mule-netsuite.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd">
	<data-mapper:config name="opp2sfdc_grf"
		transformationGraphPath="opp2sfdc.grf" doc:name="DataMapper" />
    <data-mapper:config name="list_writeresponse__to_list_writeresponse_" transformationGraphPath="list_writeresponse__to_list_writeresponse_.grf" doc:name="list_writeresponse__to_list_writeresponse_"/>
	
	
	<flow name="process.opportunity" doc:name="process.opportunity">
		<sfdc:subscribe-topic config-ref="Salesforce"
			topic="/opp3" doc:name="Salesforce (Streaming)" />
		<logger message="subscription received #[payload]" level="INFO"
			doc:name="Logger" />
		<set-variable value="#[payload.Name]" variableName="oppname"
			doc:name="Opp Name" />
        <tracking:custom-event event-name="Opportunity Closed" doc:name="Opportunity Closed">
            <tracking:meta-data key="OpportunityName" value="#[oppname]"/>
        </tracking:custom-event>
		<set-variable value="#[payload.CloseDate]" variableName="closedate"
			doc:name="Close Date" />
		<set-variable value="#[payload.Id]" variableName="oppid" doc:name="Opportunity Id" />
		<sfdc:query config-ref="Salesforce"
			query="select UnitPrice, Quantity from OpportunityLineItem where OpportunityId = '#[oppid]'"
			accessTokenId="${sfdc.access.token.id}" doc:name="GetLineItems" />
		<data-mapper:transform config-ref="opp2sfdc_grf"
			doc:name="DataMapper">
			<data-mapper:input-arguments>
			</data-mapper:input-arguments>
		</data-mapper:transform>
		<scripting:component doc:name="Groovy">
			<scripting:script engine="Groovy"><![CDATA[import com.netsuite.webservices.platform.core_2013_1.RecordRef
import com.netsuite.webservices.platform.core_2013_1.types.RecordType
import java.util.GregorianCalendar;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;
import com.netsuite.webservices.transactions.sales_2013_1.types.SalesOrderOrderStatus;

GregorianCalendar gcal = (GregorianCalendar) GregorianCalendar.getInstance();
XMLGregorianCalendar xgcal = DatatypeFactory.newInstance().newXMLGregorianCalendar(gcal);

def recRef = new RecordRef()
recRef.setType(RecordType.CUSTOMER)
recRef.setExternalId('A00000008')
recRef.setInternalId('-5')
payload.setEntity(recRef)
payload.setTranDate(xgcal)

def recRefForm = new RecordRef()
recRefForm.setName('Standard Sales Order')
recRefForm.setInternalId('68')
recRefForm.setType(RecordType.SALES_ORDER) 
payload.setCustomForm(recRefForm)

println payload.getItemList().getItem().first().getQuantity()
payload.setOrderStatus(SalesOrderOrderStatus.PENDING_APPROVAL)


return payload
]]></scripting:script>
		</scripting:component>
<!-- 		<netsuite:add-record-objects config-ref="Netsuite" -->
<!-- 			recordType="SALES_ORDER" doc:name="Create Sales Order"> -->
<!-- 			<netsuite:records ref="#[[payload]]" /> -->
<!-- 		</netsuite:add-record-objects> -->
		<netsuite:add-record-objects config-ref="Netsuite"
			doc:name="Create Sales Order">
			<netsuite:records ref="#[[payload]]" />
		</netsuite:add-record-objects>
        <set-payload value="#[ ['Id': oppid, 'SalesOrderNS__c': payload[0].baseRef.internalId] ]" doc:name="Set Payload"/>
        <tracking:custom-event event-name="Sales Order Created" doc:name="Sales Order Created">
            <tracking:meta-data key="SalesOrderNumber" value="#[payload['SalesOrderNS__c']]"/>
        </tracking:custom-event>
        <logger message="sales order created #[payload]" level="INFO" doc:name="Logger"/>
        <sfdc:update-single config-ref="Salesforce" accessTokenId="${sfdc.access.token.id}" type="Opportunity" doc:name="Update Opportunity">
            <sfdc:object ref="#[payload]"/>
        </sfdc:update-single>
        <logger message="updated order in SFDC: #[payload]" level="INFO" doc:name="Logger"/>

	</flow>

</mule>
